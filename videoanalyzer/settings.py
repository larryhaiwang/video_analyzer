"""
Django settings for videoanalyzer project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-9(7td-lx8sbr6i*6#8z4$s@#9p%7meoqpral-dz8d@ycqt$a%'

# In[]
# Determine whether system is in dev mode
RUNNING_DEVSERVER = False

# debug mode
DEBUG = RUNNING_DEVSERVER

if RUNNING_DEVSERVER:
    ALLOWED_HOSTS = ['127.0.0.1']
else:
    ALLOWED_HOSTS = ['VideoAnalyzer-env-2.mkn9urkmdc.us-west-1.elasticbeanstalk.com']

 # In[]
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # install dashboard app (configuration is stored in dashboard.apps.py)
    'dashboard.apps.DashboardConfig',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'videoanalyzer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['./videoanalyzer/templates',],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # used to enable 'back' function. Use href="{{request.META.HTTP_REFERER}}" in template
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'videoanalyzer.wsgi.application'

# In[]: Database setup
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

# production db connection
if 'RDS_DB_NAME' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'HOST': os.environ['RDS_HOSTNAME'],
            'PORT': os.environ['RDS_PORT'],
        }
    }
# local db connection
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'videoanalyzer',
            'USER': 'haiwa',
            'PASSWORD': 'larry2011',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# In[]
# static and media files setup

# local dev setting
STATIC_ROOT = 'static'
STATIC_URL = '/static/'
# setup MEDIA_ROOT and MEDIA_URL for uploaded files
MEDIA_ROOT =  'media' # 'data' is my media folder
MEDIA_URL = '/accessfile/'
    
# AWS S3 config
AWS_STORAGE_BUCKET_NAME = 'videoanalyzer-media'
AWS_S3_REGION_NAME = 'us-west-1'  # e.g. us-east-2
AWS_ACCESS_KEY_ID = 'AKIAJ77XW3FG3VF5DQTQ'
AWS_SECRET_ACCESS_KEY = 'wGnJBxvxe6h2D07suoa3GRv8+8y7o/8AJH2dDZWQ'

AWS_STATIC_LOCATION = ''
AWS_PRIVATE_MEDIA_LOCATION = ''
AWS_PUBLIC_MEDIA_LOCATION = ''

# static files
if not RUNNING_DEVSERVER:
    # Tell the staticfiles app to use S3Boto3 storage when writing the collected static files (when you run `collectstatic`).
    STATICFILES_STORAGE = 'custom_storages.StaticStorage'
    AWS_STATIC_LOCATION = 'static' # A path prefix that will be prepended to all uploads
    AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
    STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_STATIC_LOCATION)
    
    
    
    # This will tell boto that when it uploads files to S3, it should set properties on them so that when S3 serves them, 
    # it'll include some HTTP headers in the response. Those HTTP headers, in turn, will tell browsers that they can cache these files for a very long time.
    AWS_S3_OBJECT_PARAMETERS = {
        #'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
        'CacheControl': 'max-age=86400',
    }
    
# media files
if not RUNNING_DEVSERVER:
    DEFAULT_FILE_STORAGE = 'custom_storages.PrivateMediaStorage'
    AWS_PRIVATE_MEDIA_LOCATION = 'media/private'


# In[]
# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'US/Pacific'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# In[]
# Email backend
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# In[]:Other setup

# Redirect to dashboard URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = '/dashboard/'
